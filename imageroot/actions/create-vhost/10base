#!/usr/bin/env python3
#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#
import configparser
import os
import json
import sys
import subprocess
import random
import string
import http.client

# agent is a NethServer library which provides function to communicate with the agent
import agent

config = configparser.ConfigParser()
# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

ServerNames = data.get("ServerNames")
PhpVersion = data.get("PhpVersion")
MemoryLimit = data.get("MemoryLimit",'512')
AllowUrlfOpen = data.get("AllowUrlfOpen",'enabled')
Indexes = data.get("Indexes",'disabled')
status = data.get("status",'enabled')
UploadMaxFilesize = data.get("UploadMaxFilesize",'4')
PostMaxSize = data.get("PostMaxSize",'8')
MaxExecutionTime = data.get("MaxExecutionTime",'0')
MaxFileUploads = data.get("MaxFileUploads",'20')
h2hs = data.get("http2https", True)
le = data.get("lets_encrypt", False)

# read Netxfpmport, the file could be missing so we need to handle the exception
try:
    with open("databases/NextFpmPort", "r+") as fp:
        NextFpmPort = int(fp.read() or "9000") + 1
        fp.seek(0)
        fp.write(str(NextFpmPort))
except FileNotFoundError:
    NextFpmPort = 9001
    with open("databases/NextFpmPort", "w") as fp:
        fp.write(str(NextFpmPort))

config['vhost'] = {}
config['vhost']['ServerNames'] = ','.join(ServerNames)
config['vhost']['port'] = str(NextFpmPort)
config['vhost']['PhpVersion'] = str(PhpVersion)
config['vhost']['MemoryLimit'] = str(MemoryLimit)
config['vhost']['AllowUrlfOpen'] = str(AllowUrlfOpen)
config['vhost']['Indexes'] = str(Indexes)
config['vhost']['status'] = str(status)
config['vhost']['UploadMaxFilesize'] = str(UploadMaxFilesize)
config['vhost']['PostMaxSize'] = str(PostMaxSize)
config['vhost']['MaxExecutionTime'] = str(MaxExecutionTime)
config['vhost']['MaxFileUploads'] = str(MaxFileUploads)
config['vhost']['http2https'] = str('enabled') if h2hs else str('disabled')
config['vhost']['lets_encrypt'] = str('enabled') if le else str('disabled')

with open( 'databases/vhosts/' + str(NextFpmPort)+'.ini', 'w') as configfile:
    config.write(configfile)

# we need to create the user in sftpgo

f = open ('sftpgo.conf.d/API_KEY', "r")
api_key = f.read()
f.close()

# connect to sftpgo api and create the user username === NextFpmPort
conn = http.client.HTTPConnection("localhost:"+os.environ["SFTPGO_TCP_PORT"])

payload = '{"id":1,"status":1,"username":"'+str(NextFpmPort)+'","expiration_date":0,"password":"'+str(NextFpmPort)+'","home_dir":"/srv/sftpgo/data/'+str(NextFpmPort)+'","uid":1,"gid":'+str(NextFpmPort)+',"max_sessions":0,"quota_size":0,"quota_files":0,"permissions":{"/":["*"]},"created_at":0,"updated_at":0,"filters":{"tls_username":"None","hooks":{"external_auth_disabled":false,"pre_login_disabled":false,"check_password_disabled":false},"totp_config":{"secret":{}}},"filesystem":{"provider":0,"s3config":{"access_secret":{}},"gcsconfig":{"credentials":{}},"azblobconfig":{"account_key":{},"sas_url":{}},"cryptconfig":{"passphrase":{}},"sftpconfig":{"password":{},"private_key":{}}}}'

headers = {
    'Content-Type': "application/json",
    'X-SFTPGO-API-KEY': api_key
    }

conn.request("POST", "/api/v2/users", payload, headers)

## create the directory for the user with podman exec
subprocess.run(["podman", "exec", "sftpgo", "mkdir", "/srv/sftpgo/data/"+str(NextFpmPort)])
# change owner of the root folder to bin:9001 for example
subprocess.run(["podman", "exec", "sftpgo", "chown", "bin:"+str(NextFpmPort), "/srv/sftpgo/data/"+str(NextFpmPort)])
