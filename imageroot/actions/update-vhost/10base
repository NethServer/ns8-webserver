#!/usr/bin/env python3
#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#
import configparser
import os
import json
import sys
import subprocess
import http.client

# agent is a NethServer library which provides function to communicate with the agent
import agent
import agent.tasks

config = configparser.ConfigParser()
# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr

data = json.load(sys.stdin)

ServerNames = data.get("ServerNames")
port = data.get('Port')
PhpVersion = data.get("PhpVersion")
MemoryLimit = data.get("MemoryLimit",'512')
AllowUrlfOpen = data.get("AllowUrlfOpen",'enabled')
Indexes = data.get("Indexes",'disabled')
status = data.get("status",'enabled')
UploadMaxFilesize = data.get("UploadMaxFilesize",'4')
PostMaxSize = data.get("PostMaxSize",'8')
MaxExecutionTime = data.get("MaxExecutionTime",'0')
MaxFileUploads = data.get("MaxFileUploads",'20')
h2hs = data.get("http2https", True)
le = data.get("lets_encrypt", False)
sftpgo_enabled = data.get("sftpgo_enabled", False)

# Find default traefik instance for current node
default_traefik_id = agent.resolve_agent_id('traefik@node')
if default_traefik_id is None:
    sys.exit(2)

#Remove old routes in traefik
file = "databases/vhosts/"+str(port)+'.ini'
config.read(file)
hosts = config['vhost']['ServerNames'].split(',')

for host in hosts:
    # remove traefik virtual host
    response = agent.tasks.run(
        agent_id=default_traefik_id,
        action='delete-route',
        data={
            'instance': os.environ['MODULE_ID'] + '-' + host
        },
    )

    # Check if traefik configuration has been successfull
    agent.assert_exp(response['exit_code'] == 0)


# write the configuration to the database
config['vhost'] = {}
config['vhost']['ServerNames'] = ','.join(ServerNames)
config['vhost']['PhpVersion'] = str(PhpVersion)
config['vhost']['port'] = str(port)
config['vhost']['MemoryLimit'] = str(MemoryLimit)
config['vhost']['AllowUrlfOpen'] = str(AllowUrlfOpen)
config['vhost']['Indexes'] = str(Indexes)
config['vhost']['status'] = str(status)
config['vhost']['UploadMaxFilesize'] = str(UploadMaxFilesize)
config['vhost']['PostMaxSize'] = str(PostMaxSize)
config['vhost']['MaxExecutionTime'] = str(MaxExecutionTime)
config['vhost']['MaxFileUploads'] = str(MaxFileUploads)
config['vhost']['http2https'] = str('enabled') if h2hs else str('disabled')
config['vhost']['lets_encrypt'] = str('enabled') if le else str('disabled')
config['vhost']['sftpgo_enabled'] = str('enabled') if sftpgo_enabled else str('disabled')

with open( 'databases/vhosts/' + str(port) +'.ini', 'w') as configfile:
    config.write(configfile)

# we need to create the user in sftpgo

if sftpgo_enabled:
    f = open ('sftpgo.conf.d/API_KEY', "r")
    api_key = f.read()
    f.close()

    # connect to sftpgo api and create the user username === port
    conn = http.client.HTTPConnection("localhost:"+os.environ["SFTPGO_TCP_PORT"])

    payload = '{"id":1,"status":1,"username":"'+str(port)+'","expiration_date":0,"password":"'+str(port)+'","home_dir":"/srv/sftpgo/data/'+str(port)+'","uid":1,"gid":'+str(port)+',"max_sessions":0,"quota_size":0,"quota_files":0,"permissions":{"/":["*"]},"created_at":0,"updated_at":0,"filters":{"tls_username":"None","hooks":{"external_auth_disabled":false,"pre_login_disabled":false,"check_password_disabled":false},"totp_config":{"secret":{}}},"filesystem":{"provider":0,"s3config":{"access_secret":{}},"gcsconfig":{"credentials":{}},"azblobconfig":{"account_key":{},"sas_url":{}},"cryptconfig":{"passphrase":{}},"sftpconfig":{"password":{},"private_key":{}}}}'

    headers = {
        'Content-Type': "application/json",
        'X-SFTPGO-API-KEY': api_key
        }

    conn.request("POST", "/api/v2/users", payload, headers)
else:
    # connect to sftpgo api and delete the user username === port
    # read api key
    f = open ('sftpgo.conf.d/API_KEY', "r")
    api_key = f.read()
    f.close()

    conn = http.client.HTTPConnection("localhost:"+os.environ["SFTPGO_TCP_PORT"])

    headers = {
        'Content-Type': "application/json",
        'X-SFTPGO-API-KEY': api_key
        }

    conn.request("DELETE", "/api/v2/users/"+str(port), headers=headers)
