#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import glob
import configparser
import json
import sys
import agent
configuration = {}
vhosts = []
for file in glob.iglob("databases/vhosts/*.ini"):
    config = configparser.ConfigParser()
    config.read(file)
    ServerNames = config['vhost']['ServerNames'].split(',')
    vhost = {
        "ServerNames" : ServerNames,
        "Port" : int(config['vhost']['port']),
        "PhpVersion" : config['vhost']['PhpVersion'],
        "MemoryLimit" : int(config['vhost']['MemoryLimit']),
        "allowurlfopen" : config['vhost']['allowurlfopen'],
        "UploadMaxFilesize" : int(config['vhost']['UploadMaxFilesize']),
        "PostMaxSize" : int(config['vhost']['PostMaxSize']),
        "MaxExecutionTime" : int(config['vhost']['MaxExecutionTime']),
        "MaxFileUploads" : int(config['vhost']['MaxFileUploads']),
        "Indexes" : config['vhost']['Indexes'],
        "status" : config['vhost']['status'],
        "name": str(config['vhost']['port']),
        "http2https": True if config['vhost']['http2https'] == "enabled" else False,
        "lets_encrypt": True if config['vhost']['lets_encrypt'] == "enabled" else False
    }
    vhosts.append(vhost)

configuration['virtualhost'] = vhosts
# read Netxfpmport
with open("databases/NextFpmPort", "r") as fp:
    NextFpmPort = int(fp.read() or "9000") + 1
fp.close()

configuration['NextFpmPort'] = NextFpmPort


# Read current configuration from Redis
env = f'module/{os.environ["MODULE_ID"]}/environment'
rdb = agent.redis_connect()
configuration["sftp_tcp_port"] = int(rdb.hget(env, "SFTP_TCP_PORT"));
configuration["path"] =  rdb.hget(env, "TRAEFIK_PATH");
configuration["http2https"] =  rdb.hget(env, "TRAEFIK_HTTP2HTTPS") == "True";

json.dump(configuration, fp=sys.stdout)
