#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

# Create the API key for sftpgo

import os
import sys
import json
import http.client
import time

if os.path.isfile("sftpgo.conf.d/API_KEY"):
    sys.exit(0)
else:
    # we test the sftpgo port is responsive but with slow system 
    # we need to be sure we can connect
    # we need only one time, we exit if state/sftpgo.conf.d/API_KEY exists
    i = 0
    while i < 5:
        try:
            i += 1
            conn = http.client.HTTPConnection("localhost:"+os.environ["SFTPGO_TCP_PORT"])
        except:
            #We are waiting after sftpgo.service
            time.sleep(5)

    # create the short TTL token
    headers = {
        'Content-Type': "application/json",
        'X-SFTPGO-OTP': "",
        'Authorization': "Basic YWRtaW46YWRtaW4="
        }

    conn.request("GET", "/api/v2/token", headers=headers)

    res = conn.getresponse()
    data = res.read()

    token = json.loads(data) 

    # create the API KEY
    payload = '{"id":"admin","name":"admin","scope": 1,"description": "administration api key","admin": "admin"}'

    headers = {
        'Content-Type': "application/json",
        'Authorization': "Bearer "+token["access_token"]
        }

    conn.request("POST", "/api/v2/apikeys", payload, headers)

    res = conn.getresponse()
    data = res.read()

    key = json.loads(data)

    # write the key to a file and protect it
    oldmask = os.umask(0o77)
    with open('sftpgo.conf.d/API_KEY', "w") as fkey:
        fkey.write(key["key"])
    os.umask(oldmask)
